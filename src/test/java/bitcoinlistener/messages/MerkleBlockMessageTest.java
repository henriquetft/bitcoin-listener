/*
 * Copyright (c) 2021, Henrique Te√≥filo
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

package bitcoinlistener.messages;

import bitcoinlistener.BitcoinBuffer;
import bitcoinlistener.util.ByteUtil;
import bitcoinlistener.util.PartialMerkleTree;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertEquals;

public class MerkleBlockMessageTest {

	@Test
	public void testMsg1() {
		String msg = "0x0 0x0 0xa0 0x20 0x73 0xf4 0xf1 0x7f 0x87 0x80 0x8d 0x78 0xf9 0x3c 0x8f 0x3f 0xa9 0xb7 0xb0 0x31 0x98 0xfe 0xe1 0xa1 0xa7 0x5d 0x76 0x73 0x3f 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0xf0 0x81 0x6a 0xe3 0xa9 0x63 0x69 0x92 0xaf 0x93 0x6e 0xf3 0xcc 0x3a 0xf1 0x8d 0xd2 0x3e 0x47 0x9e 0xc9 0x68 0x44 0x9e 0x66 0xfa 0xe5 0x63 0xb3 0x6e 0x39 0x4a 0xbc 0x76 0xeb 0x60 0xff 0xff 0x0 0x1a 0x90 0x2f 0x74 0x55 0x4 0x0 0x0 0x0 0x1 0xf0 0x81 0x6a 0xe3 0xa9 0x63 0x69 0x92 0xaf 0x93 0x6e 0xf3 0xcc 0x3a 0xf1 0x8d 0xd2 0x3e 0x47 0x9e 0xc9 0x68 0x44 0x9e 0x66 0xfa 0xe5 0x63 0xb3 0x6e 0x39 0x4a 0x1 0x0";

		BitcoinBuffer buffer = getBuffer(msg);
		MerkleBlockMessage block = new MerkleBlockMessage();
		block.loadFromBuffer(buffer);
		System.out.println(block);

		assertEquals("000000000000002a1f52016549128eb8cdc4c0967347ed466995a7642757e555",
					 block.getHashAsStr());
		assertEquals(0x20a00000, block.getVersion());
		assertEquals("000000000000003f73765da7a1e1fe9831b0b7a93f8f3cf9788d80877ff1f473",
					 block.getPrevBlock().getHashAsStr());
		assertEquals("4a396eb363e5fa669e4468c99e473ed28df13accf36e93af926963a9e36a81f0",
					 block.getMerkleRoot().getHashAsStr());
		assertEquals(1626044092, block.getTimestamp());
		assertEquals(436273151, block.getBits());
		assertEquals(1433677712L, block.getNonce());
		assertEquals(4, block.getTotalTransactions());
		// FIXME test flags
		assertEquals(1, block.getHashes().size());

		byte[] flags = block.getFlags();
		List<Boolean> flagList = ByteUtil.getFlagList(flags);

		PartialMerkleTree pmt = new PartialMerkleTree(block.getHashes(),
													  block.getTotalTransactions(),
													  flagList);

		pmt.build();
		assertEquals("4a396eb363e5fa669e4468c99e473ed28df13accf36e93af926963a9e36a81f0", pmt.getMerkleRoot().getHashAsStr());

		//assertEquals(arr.length, buffer.getPosition());
	}

	@Test
	public void testMsg3() {
		String msg = "0x0 0x0 0x0 0x20 0x33 0xd1 0x77 0xa2 0x3f 0x51 0xf8 0x5a 0x4a 0x3f 0x30 0xb 0x31 0x95 0x17 0x5c 0x6e 0xf 0x3d 0x89 0xea 0xf2 0xed 0x4 0x1e 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x5f 0x8a 0xaa 0x89 0xfa 0x5f 0xf3 0x96 0xda 0xf 0xd9 0x85 0x5e 0x5d 0x46 0xcd 0x48 0x5d 0x20 0x9a 0xa5 0xc2 0x3a 0x52 0x6 0x3b 0x48 0xf3 0xd7 0xe5 0xff 0x68 0xe8 0x64 0x22 0x61 0xff 0xff 0x0 0x1d 0x59 0x9d 0x79 0x86 0xb1 0x0 0x0 0x0 0x8 0x98 0x13 0x5d 0x7e 0x89 0x59 0x5f 0xa9 0x7b 0x7 0xe9 0x1a 0x8c 0x36 0xaf 0xdc 0x8c 0xf4 0x33 0xcb 0x1c 0x7b 0x9e 0x47 0x38 0xa0 0x1c 0xae 0xaa 0xf3 0x6f 0xb4 0x72 0x33 0x8f 0xd3 0x8f 0xae 0xee 0x6f 0x6a 0xda 0x1 0x4d 0x65 0x18 0xe0 0x26 0x9d 0x91 0x83 0x96 0xda 0xa7 0xad 0x2c 0x3d 0x59 0x63 0xf0 0x4 0xe2 0x3a 0x8f 0x67 0x21 0x3f 0x37 0x85 0x15 0x3 0x5a 0x56 0x24 0x3b 0xfb 0x5d 0x1f 0x30 0x8d 0xc2 0xea 0x58 0xf8 0x4e 0x73 0x63 0xd3 0x26 0x23 0x1c 0x4e 0x23 0x56 0xc9 0xec 0xb5 0x19 0x7f 0xa7 0x69 0x8d 0x8 0xe5 0x13 0xbb 0xf1 0x19 0x7b 0xf9 0xdc 0x11 0xdd 0xd4 0xe3 0x79 0x54 0x2e 0x6 0xf5 0x39 0x55 0x3d 0x38 0xb0 0x48 0x8b 0x9a 0xe7 0x33 0xc 0x8 0x42 0xe0 0x30 0x5d 0x70 0xd5 0x53 0xf3 0xf6 0xc3 0x1d 0xc9 0x88 0x35 0xd3 0x1f 0x20 0x7b 0x26 0x87 0x34 0x92 0xa8 0x9 0xee 0x3e 0xb1 0xb8 0x9a 0x41 0x84 0x46 0x80 0xd9 0xf 0xd5 0x60 0x62 0x33 0xad 0x96 0x2f 0x6a 0x33 0x23 0xc3 0xfc 0xc 0xf6 0xaf 0x47 0x17 0x1a 0xa 0x9 0xed 0xf9 0xb1 0x1c 0x4c 0xe5 0xc3 0xb5 0x85 0xfe 0x5a 0x7f 0x7e 0xbd 0x78 0x2f 0x28 0x5a 0x30 0xf5 0x7f 0xb5 0xee 0xdc 0x99 0x1e 0x23 0xcf 0x9a 0x44 0x8f 0x63 0x97 0xcf 0x75 0x1f 0xa2 0x9d 0xe1 0x12 0x48 0x21 0x7c 0xc 0xdc 0x9b 0x94 0x95 0x45 0x9 0x7a 0x56 0x8b 0x4 0x47 0x99 0x3c 0x1c 0xa4 0x80 0x89 0x78 0xfd 0x57 0x18 0x35 0xc1 0x56 0x35 0x2 0xdd 0x16";
		BitcoinBuffer buffer = getBuffer(msg);
		MerkleBlockMessage block = new MerkleBlockMessage();
		block.loadFromBuffer(buffer);
		byte[] flags = block.getFlags();
		List<Boolean> flagList = ByteUtil.getFlagList(flags);

		PartialMerkleTree pmt = new PartialMerkleTree(block.getHashes(),
													  block.getTotalTransactions(),
													  flagList);

		pmt.build();

		assertEquals("000000000000513d663e68e72bceb209cfbbde55d14dd9eb44940dc35d7b1956", block.getHashAsStr());
		assertEquals("68ffe5d7f3483b06523ac2a59a205d48cd465d5e85d90fda96f35ffa89aa8a5f", block.getMerkleRoot().getHashAsStr());
		assertEquals("68ffe5d7f3483b06523ac2a59a205d48cd465d5e85d90fda96f35ffa89aa8a5f", pmt.getMerkleRoot().getHashAsStr());
		assertEquals("b8b13eee09a8923487267b201fd33588c91dc3f6f353d5705d30e042080c33e7", pmt.getMatchedTxIds().get(0).getHashAsStr());
	}


	@Test
	public void testMsg5() {
		String msg = "0x0 0x0 0x0 0x20 0xa4 0x77 0x36 0x6 0x71 0x5f 0x85 0xea 0x40 0x2 0xd7 0x3 0xc0 0x24 0xf2 0x85 0x28 0x13 0xac 0x55 0xfc 0x3d 0x38 0xda 0x37 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0xd6 0xc3 0xc8 0x87 0x59 0xc8 0xdd 0x43 0xec 0x75 0x6c 0x4f 0x82 0x22 0x16 0xd8 0x4e 0xb0 0x91 0xa6 0xb8 0x8f 0x90 0xeb 0x50 0xf4 0xf1 0x29 0x95 0x88 0xf7 0x65 0x4 0xc0 0x11 0x61 0xff 0xff 0x0 0x1d 0xc5 0xe4 0x59 0x98 0x3b 0x0 0x0 0x0 0x7 0xe8 0x42 0xdd 0x18 0x57 0x1 0x2e 0xd3 0x79 0xc2 0x23 0x6c 0x17 0xd7 0xad 0x23 0xa6 0xc 0xa0 0x38 0x8 0xc2 0xd4 0xca 0x6e 0x69 0xad 0x33 0xf5 0x47 0x4b 0x91 0xe1 0xee 0x53 0x2 0x16 0x6c 0xd1 0x45 0x83 0x7b 0x44 0x55 0xa 0x58 0x22 0xed 0xb2 0x88 0xdc 0x3f 0xcf 0xf8 0x35 0x78 0xe2 0x6c 0x61 0x99 0xcb 0x3d 0x50 0x4a 0x74 0x7c 0xa2 0xce 0x14 0x85 0x34 0x1b 0xeb 0x69 0xd 0x97 0x6e 0x67 0x4e 0x4f 0xdf 0x26 0x29 0x39 0xc2 0x6b 0x57 0xb9 0xce 0x87 0xa0 0x45 0x62 0x5 0x90 0x7c 0x20 0x23 0x1c 0x31 0x43 0x84 0x4 0xe 0x63 0xd7 0xf7 0xd2 0x54 0xb 0x3d 0x24 0x41 0x6b 0xe2 0x36 0x12 0x2e 0x21 0x2a 0x44 0x4b 0x33 0x6c 0xc8 0x7d 0xef 0xc8 0x72 0x35 0x77 0x47 0x60 0x16 0xc8 0xec 0xd2 0x10 0x2e 0x25 0x63 0x47 0xdb 0x51 0x44 0x3d 0xc1 0xb2 0x73 0x19 0x40 0x6c 0xd2 0x2b 0x10 0xf4 0x55 0x21 0xb3 0x7a 0x86 0xaa 0x51 0x69 0x98 0x2c 0x3d 0xd7 0x7a 0x16 0x9d 0x1d 0xb9 0x3e 0x44 0xe1 0xbf 0x36 0xe7 0x70 0xc2 0xf6 0xa4 0x75 0x8b 0x52 0xb8 0x27 0x4a 0x63 0xc9 0xbc 0x8d 0x5 0x87 0x81 0xf4 0x4 0xd7 0xd7 0x27 0xc2 0xe8 0x21 0x27 0xb8 0x36 0xa2 0xd8 0xd6 0x84 0x10 0xf0 0x14 0x91 0x55 0xa3 0xb8 0x7d 0xc6 0xab 0xe 0x95 0x21 0x2 0xdd 0x2";
		BitcoinBuffer buffer = getBuffer(msg);
		MerkleBlockMessage block = new MerkleBlockMessage();

		block.loadFromBuffer(buffer);
		byte[] flags = block.getFlags();
		List<Boolean> flagList = ByteUtil.getFlagList(flags);

		PartialMerkleTree pmt = new PartialMerkleTree(block.getHashes(),
													  block.getTotalTransactions(),
													  flagList);

		pmt.build();

		assertEquals("65f7889529f1f450eb908fb8a691b04ed81622824f6c75ec43ddc85987c8c3d6", pmt.getMerkleRoot().getHashAsStr());

	}

	private static BitcoinBuffer getBuffer(String msg) {
		msg = msg.replaceAll("0x", "").trim();
		String[] arr = msg.split(" ");
		byte[] barr = new byte[arr.length];

		int x = 0;
		for (String string : arr) {
			int decimal = Integer.parseInt(string, 16);
			barr[x++] = (byte) decimal;
		}

		BitcoinBuffer buffer = new BitcoinBuffer(barr);
		return buffer;
	}
}

